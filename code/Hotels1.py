# -*- coding: utf-8 -*-
"""Cach1_Hotels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EqnAZEYEFCI22d2qGw13020k0T9ro5Ax
"""

#Dua tren rating
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

data = pd.read_csv('datasets_hotels.csv')
data.head()

data['rating'] = data['rating'].astype(str)

tfidf = TfidfVectorizer()
data['rating'] = data['rating'].fillna('')
#Xây dựng ma trận TF-IDF bắt buộc bằng cách áp dụng phương thức fit_transform trên tính năng tổng quan
overview_matrix = tfidf.fit_transform(data['rating'])
#Xuất ra hình dạng của tfidf_matrix
overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#lập bản đồ chỉ số khách sạn
mapping = pd.Series(data.index,index = data['rating'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  #nhận các giá trị tương tự với khách sạn khác
  #điểm tương tự là danh sách chỉ số và ma trận tương tự
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  #sắp xếp theo thứ tự giảm dần điểm tương đồng của khách sạn được nhập với tất cả các khách sạn khác
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  # Nhận điểm của 5 khách sạn giống nhau nhất. Bỏ qua khách sạn đầu tiên.
  similarity_score = similarity_score[0:5]
  #trả về tên khách sạn bằng cách sử dụng chuỗi ánh xạ
  hotel_indices = [i[0] for i in similarity_score]
  return (data[['name','rating']].iloc[hotel_indices])

recommend_hotel_based_on_plot('8.1')

data['price'] = data['price'].astype(str)

#Theo gia 
tfidf = TfidfVectorizer()
data['price'] = data['price'].fillna('')

overview_matrix = tfidf.fit_transform(data['price'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

mapping = pd.Series(data.index,index = data['price'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]

  similarity_score = list(enumerate(similarity_matrix[hotel_index]))

  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)

  similarity_score = similarity_score[1:6]

  hotel_indices = [i[0] for i in similarity_score]
  return (data['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('23')

#data['rating_title'] = data['rating_title'].astype(str)

#Theo luot views
tfidf = TfidfVectorizer()
data['number_of_ratings'] = data['number_of_ratings'].fillna('')

overview_matrix = tfidf.fit_transform(data['number_of_ratings'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix


mapping = pd.Series(data.index,index = data['number_of_ratings'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  similarity_score = similarity_score[1:6]
  hotel_indices = [i[0] for i in similarity_score]
  return (data['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('84 reviews')

#Theo noi toa lac
tfidf = TfidfVectorizer()
data['location'] = data['location'].fillna('')

overview_matrix = tfidf.fit_transform(data['location'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix


mapping = pd.Series(data.index,index = data['location'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  similarity_score = similarity_score[1:6]
  hotel_indices = [i[0] for i in similarity_score]
  return (data['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('Ninh Kiều')

#Theo loai phong
tfidf = TfidfVectorizer()
data['room_type'] = data['room_type'].fillna('')

overview_matrix = tfidf.fit_transform(data['room_type'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

mapping = pd.Series(data.index,index = data['room_type'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  similarity_score = similarity_score[1:6]
  hotel_indices = [i[0] for i in similarity_score]
  return (data['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('Superior Double Room')

#Theo noi so nguoi
tfidf = TfidfVectorizer()
data['People numbers'] = data['People numbers'].fillna('')

overview_matrix = tfidf.fit_transform(data['People numbers'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

mapping = pd.Series(data.index,index = data['People numbers'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  similarity_score = similarity_score[1:6]
  hotel_indices = [i[0] for i in similarity_score]
  return (data['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('1 large double bed')