# -*- coding: utf-8 -*-
"""Cach2_Hotels.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14hk8nGWfJF7omifJ_aiZBtHwN2ZwJgjx
"""

#importing necessary libraries
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

df = pd.read_csv('datasets_hotels.csv')
df.head()

# = df['rating']*1000

#df['rating1']=df['rating1'].to_numeric(s, downcast='integer')

#def sentiment(rating_title):
  #if rating in range(0,5.0):
    #return 'Dưới 1 triệu'
  #elif rating in range(5.1,7.5):
    #return '1 triệu - 2 triệu'
  #else:
    #return 'Trên 2 triệu'

#df['rating1'] = df['rating'].apply(sentiment)
#df

df.info()

# De xuất theo khoảng cách
tfidf = TfidfVectorizer()
df['Distance'] = df['Distance'].fillna('')
#Xây dựng ma trận TF-IDF bắt buộc bằng cách áp dụng phương thức fit_transform trên tính năng tổng quan
overview_matrix = tfidf.fit_transform(df['Distance'])
#Xuất ra hình dạng của tfidf_matrix
overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#hotel index mapping
mapping = pd.Series(df.index,index = df['Distance'])
mapping

def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  #nhận các giá trị tương tự với khách sạn khác
  #điểm tương tự là danh sách chỉ số và ma trận tương tự
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  #sắp xếp theo thứ tự giảm dần điểm tương đồng của khách sạn được nhập với tất cả các khách sạn khác
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  # Nhận điểm của 5 khách sạn giống nhau nhất. Bỏ qua khách sạn đầu tiên.
  similarity_score = similarity_score[1:6]
  #trả về tên khách sạn bằng cách sử dụng chuỗi ánh xạ
  hotel_indices = [i[0] for i in similarity_score]
  return (df[['name','price']].iloc[hotel_indices])

recommend_hotel_based_on_plot('1.2 km from centre')

df['price'] = df['price'].astype(int)
df.info()

#df['price'] = df['price'].strip ( 'US$' )
#df.head()

def sentiment(price):
  if price in range(0,10):
    return 'Giá Thấp'
  elif price in range(11,20):
    return 'Giá Trung Bình'
  else:
    return 'Giá Cao' 

df['price_list'] = df['price'].apply(sentiment)
df.head()

#theo gia
tfidf = TfidfVectorizer()
df['price_list'] = df['price_list'].fillna('')

overview_matrix = tfidf.fit_transform(df['price_list'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

mapping = pd.Series(df.index,index = df['price_list'])


def recommend_hotel_based_on_plot(hotel_input):
  hotel_index = mapping[hotel_input]
  similarity_score = list(enumerate(similarity_matrix[hotel_index]))
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  similarity_score = similarity_score[0:5]
  hotel_indices = [i[0] for i in similarity_score]
  return (df['name'].iloc[hotel_indices])

recommend_hotel_based_on_plot('Giá Thấp')