# -*- coding: utf-8 -*-
"""Cach1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16LfYUhxxIbLmAoGRRjB__7EPSfnZ_Fkj
"""

#Dua tren dien tich nha tro
#import thư viện
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

data = pd.read_csv('datasets_motels.csv')
data.head()

tfidf = TfidfVectorizer()
data['dientich'] = data['dientich'].fillna('')
#Xây dựng ma trận TF-IDF bắt buộc bằng cách áp dụng phương pháp fit_transform trên tính năng tổng quan
overview_matrix = tfidf.fit_transform(data['dientich'])
#Xuất ra hình dạng của tfidf_matrix
overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#motel index mapping
mapping = pd.Series(data.index,index = data['dientich'])
mapping

def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]
  #nhận các giá trị tương tự với các nhà trọ khác
  #điểm tương tự là danh sách chỉ số và ma trận tương tự
  similarity_score = list(enumerate(similarity_matrix[motel_index]))
  #sắp xếp theo thứ tự giảm dần điểm tương tự của nhà trọ được nhập với tất cả các nhà trọ khác
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  #Nhận điểm của 5 nhà nghỉ giống nhau nhất. Bỏ qua nhà nghỉ đầu tiên.
  similarity_score = similarity_score[1:5]
  #trả lại tên nhà nghỉ bằng cách sử dụng chuỗi ánh xạ
  motel_indices = [i[0] for i in similarity_score]
  return (data['tennhatro'].iloc[motel_indices])

recommend_motel_based_on_plot('DT: 15.00 m²')

data['gia'] = data['gia'].astype(str)

#Theo gia nha tro
tfidf = TfidfVectorizer()
data['gia'] = data['gia'].fillna('')

overview_matrix = tfidf.fit_transform(data['gia'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#motel index mapping
mapping = pd.Series(data.index,index = data['gia'])
mapping

def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]

  similarity_score = list(enumerate(similarity_matrix[motel_index]))

  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)

  similarity_score = similarity_score[1:6]

  motel_indices = [i[0] for i in similarity_score]
  return (data['tennhatro'].iloc[motel_indices])

recommend_motel_based_on_plot('2000000')

data['luotxem'] = data['luotxem'].astype(str)

#Theo luot xem cua nha tro
tfidf = TfidfVectorizer()
data['luotxem'] = data['luotxem'].fillna('')

overview_matrix = tfidf.fit_transform(data['luotxem'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#motel index mapping
mapping = pd.Series(data.index,index = data['luotxem'])
mapping

def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]

  similarity_score = list(enumerate(similarity_matrix[motel_index]))

  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)

  similarity_score = similarity_score[1:6]

  motel_indices = [i[0] for i in similarity_score]
  return (data['tennhatro'].iloc[motel_indices])

recommend_motel_based_on_plot('78796')

#Theo noi toa lac
tfidf = TfidfVectorizer()
data['toalac'] = data['toalac'].fillna('')

overview_matrix = tfidf.fit_transform(data['toalac'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#motel index mapping
mapping = pd.Series(data.index,index = data['toalac'])
mapping

def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]

  similarity_score = list(enumerate(similarity_matrix[motel_index]))

  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)

  similarity_score = similarity_score[1:6]

  motel_indices = [i[0] for i in similarity_score]
  return (data['tennhatro'].iloc[motel_indices])

recommend_motel_based_on_plot('Ninh Kiều')