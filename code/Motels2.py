# -*- coding: utf-8 -*-
"""Cach2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KsltvQjKJgLY3kD6xgAF3oBX2lfK99mi
"""

#import thư viện
import numpy as np
import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import linear_kernel

df = pd.read_csv('datasets_motels.csv')
df.head()

def sentiment(gia):
  if gia in range(0,1000000):
    return 'Dưới 1 triệu'
  elif gia in range(1000001,2000000):
    return '1 triệu - 2 triệu'
  else:
    return 'Trên 2 triệu'

df['gia1'] = df['gia'].apply(sentiment)
df

df.info()

tfidf = TfidfVectorizer()
df['gia1'] = df['gia1'].fillna('')
#Xây dựng ma trận TF-IDF bắt buộc bằng cách áp dụng phương pháp fit_transform trên tính năng tổng quan
overview_matrix = tfidf.fit_transform(df['gia1'])
#Xuất ra hình dạng của tfidf_matrix
overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix

#motel index mapping
mapping = pd.Series(df.index,index = df['gia1'])
mapping

def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]
  #nhận các giá trị tương tự với các nhà trọ khác
  #điểm tương tự là danh sách chỉ số và ma trận tương tự
  similarity_score = list(enumerate(similarity_matrix[motel_index]))
  #sắp xếp theo thứ tự giảm dần điểm tương tự của nhà trọ được nhập với tất cả các nhà trọ khác
  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  # Nhận điểm của 5 nhà nghỉ giống nhau nhất. Bỏ qua nhà nghỉ đầu tiên.
  similarity_score = similarity_score[0:5]
  #trả lại tên nhà nghỉ bằng cách sử dụng chuỗi ánh xạ
  motel_indices = [i[0] for i in similarity_score]
  return (df[['tennhatro','gia']].iloc[motel_indices])

recommend_motel_based_on_plot('Dưới 1 triệu')

def sentiment(luotxem):
  if luotxem in range(0,1000):
    return 'Thấp'
  elif luotxem in range(1001,10000):
    return 'Trung Bình'
  elif luotxem in range(10001,50000):
    return 'Khá'
  elif luotxem in range(50001,70000):
    return 'Tốt'
  else:
    return 'Rất tốt' 

df['luotxem1'] = df['luotxem'].apply(sentiment)
df.head()

tfidf = TfidfVectorizer()
df['luotxem1'] = df['luotxem1'].fillna('')

overview_matrix = tfidf.fit_transform(df['luotxem1'])

overview_matrix.shape

similarity_matrix = linear_kernel(overview_matrix,overview_matrix)
similarity_matrix


mapping = pd.Series(df.index,index = df['luotxem1'])


def recommend_motel_based_on_plot(motel_input):
  motel_index = mapping[motel_input]

  similarity_score = list(enumerate(similarity_matrix[motel_index]))

  similarity_score = sorted(similarity_score, key=lambda x: x[0], reverse=True)
  
  similarity_score = similarity_score[0:5]
  
  motel_indices = [i[0] for i in similarity_score]
  return (df[['tennhatro','gia']].iloc[motel_indices])

recommend_motel_based_on_plot('Tốt')